<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginaPageTable extends Doctrine_Table
{
  // Is this the best place to keep snippets like this?

  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context
  static public function retrieveBySlug($slug, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    $query = new Doctrine_Query();
    $page = $query->
      from('aPage p')->
      where('p.slug = ?', $slug)->
      fetchOne();
    // In case Doctrine is clever and returns the same page object
    if ($page)
    {
      $page->clearSlotCache();
      $page->setCulture($culture);
    }
    return $page;
  }

  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context
  static public function retrieveBySlugWithTitles($slug, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    $query = self::queryWithTitles($culture);
    $page = $query->
      where('p.slug = ?', $slug)->
      fetchOne();
    // In case Doctrine is clever and returns the same page object
    if ($page)
    {
      $page->clearSlotCache();
      $page->setCulture($culture);
    }
    return $page;
  }
  
  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context
  static public function retrieveBySlugWithSlots($slug, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    $query = self::queryWithSlots(false, $culture);
    $page = $query->
      where('p.slug = ?', $slug)->
      fetchOne();
    // In case Doctrine is clever and returns the same page object
    if ($page)
    {
      $page->clearSlotCache();
      $page->setCulture($culture);
    }
    return $page;
  }
  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context

  static public function queryWithTitles($culture = null)
  {
    return self::queryWithSlot('title', $culture);
  }
  
  // This is a slot name, like 'title'
  static public function queryWithSlot($slot, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    return Doctrine_Query::Create()->
      select("p.*, a.*, v.*, avs.*, s.*")->
      from("aPage p")->
      leftJoin('p.Areas a WITH (a.name = ? AND a.culture = ?)', array($slot, $culture))->
      leftJoin('a.AreaVersions v WITH (a.latest_version = v.version)')->
      leftJoin('v.AreaVersionSlots avs')->
      leftJoin('avs.Slot s');
  }

  // This is a slot type, like 'aRichText'
  static public function queryWithSlotType($slotType, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    return Doctrine_Query::Create()->
      select("p.*, a.*, v.*, avs.*, s.*")->
      from("aPage p")->
      leftJoin('p.Areas a WITH (a.culture = ?)', array($culture))->
      leftJoin('a.AreaVersions v WITH (a.latest_version = v.version)')->
      leftJoin('v.AreaVersionSlots avs')->
      leftJoin('avs.Slot s WITH (s.type = ?)', array($slotType));
  }
 
  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context

  static public function retrieveByIdWithSlots($id, $culture = null)
  {
    return self::retrieveByIdWithSlotsForVersion($id, false, $culture);
  }
  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context

  static public function retrieveByIdWithSlotsForVersion($id, $version, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    $page = self::queryWithSlots($version, $culture)->
      where('p.id = ?', array($id))->
      fetchOne();
    // In case Doctrine is clever and returns the same page object
    if ($page)
    {
      $page->clearSlotCache();
      // Thanks to Quentin Dugauthier for spotting that there were
      // still instances of this not being inside the if
      $page->setCulture($culture);
    }
    return $page;
  }

  // If version is false you get the latest version of each slot.
  
  // If culture is null you get the current user's culture,
  // or sf_default_culture if none is set or we're running in a task context
  
  // If culture is 'all' you get all cultures. This option is only for use in low level
  // queries such as the implementation of the a:refresh task and will not 
  // work as expected for page rendering purposes. Normally you never fetch all culture slots
  // at once
  
  // Also brings in related media objects since the assumption is that you are actually
  // rendering a page. See queryWithTitles and, better yet, the getChildrenInfo() method
  // and its relatives for efficient ways to find out information about other pages quickly

  static public function queryWithSlots($version = false, $culture = null)
  {
    if (is_null($culture))
    {
      $culture = aTools::getUserCulture();
    }
    $query = Doctrine_Query::Create()->
      select("p.*, a.*, v.*, avs.*, s.*, m.*")->
      from("aPage p");
    if ($culture === 'all')
    {
      $query = $query->leftJoin('p.Areas a');
    }
    else
    {
      $query = $query->leftJoin('p.Areas a WITH a.culture = ?', array($culture));
    }
    if ($version === false)
    {
      $query = $query->
        leftJoin('a.AreaVersions v WITH (a.latest_version = v.version)');
    }
    else
    {
      $query = $query->
        leftJoin('a.AreaVersions v WITH (v.version = ?)', array($version));
    }
    return $query->leftJoin('v.AreaVersionSlots avs')->
      leftJoin('avs.Slot s')->
      leftJoin('s.MediaItems m')->
      orderBy('avs.rank asc');
  }
  
  
  
  static private $treeObject = null;
  
  static public function treeTitlesOn()
  {
    self::treeSlotOn('title');
  }
  
  static public function treeSlotOn($slot)
  {
    $query = aPageTable::queryWithSlot($slot);
    self::$treeObject = Doctrine::getTable('aPage')->getTree();
    // I'm not crazy about how I have to set the base query and then
    // reset it, instead of simply passing it to getChildren. A
    // Doctrine oddity
    self::$treeObject->setBaseQuery($query);
  }
  
  static public function treeTitlesOff()
  {
    self::treeSlotOff();
  }
  
  static public function treeSlotOff()
  {
    self::$treeObject->resetBaseQuery();
  } 
  
  public function getLuceneIndexFile()
  {
    return aZendSearch::getLuceneIndexFile($this);
  }

  public function getLuceneIndex()
  {
    return aZendSearch::getLuceneIndex($this);
  }

  public function rebuildLuceneIndex()
  {
    aZendSearch::purgeLuceneIndex($this);
    $pages = $this->findAll();
    foreach ($pages as $page)
    {
      $cultures = array();
      foreach ($page->Areas as $area)
      {
        $cultures[$area->culture] = true; 
      }
      $cultures = array_keys($cultures);
      foreach ($cultures as $culture)
      {
        $cpage = self::retrieveByIdWithSlots($page->id, $culture);
        $cpage->updateLuceneIndex();
      }
    }
  }
  
  public function addSearchQuery(Doctrine_Query $q = null, $luceneQuery)
  {
    // Page searches are always specific to this user's culture
    $culture = aTools::getUserCulture();
    $luceneQuery = "+(text:($luceneQuery))";
    return aZendSearch::addSearchQuery($this, $q, $luceneQuery, $culture);
  }
  
  public function addSearchQueryWithScores(Doctrine_Query $q = null, $luceneQuery, &$scores)
  {
    // Page searches are always specific to this user's culture
    $culture = aTools::getUserCulture();
    $luceneQuery = "+(text:($luceneQuery))";
    return aZendSearch::addSearchQueryWithScores($this, $q, $luceneQuery, $culture, $scores);
  }
  
  // Just a hook used by the above
  public function searchLucene($query, $culture)
  {
    return aZendSearch::searchLucene($this, $query, $culture);
  }
  
  // Just a hook used by the above
  public function searchLuceneWithScores($query, $culture)
  {
    return aZendSearch::searchLuceneWithScores($this, $query, $culture);
  }

  // Returns engine page with the longest matching path.
  // We use a cache so that we don't wind up making separate queries
  // for every engine route in the application
  
  protected static $engineCacheUrl = false;
  protected static $engineCachePage = false;
  protected static $engineCacheRemainder = false;
  protected static $engineCacheFirstEnginePages = array();
  protected static $engineCachePagePrefix = false;
  
  static public function getMatchingEnginePage($url, &$remainder)
  {
    // Engines won't work on sites where the CMS is not mounted at the root of the site
    // unless we examine the a_page route to determine a prefix. Generate the route properly
    // then lop off the controller name, if any
    
    if ($url === self::$engineCacheUrl)
    {
      $remainder = self::$engineCacheRemainder;
      return self::$engineCachePage;
    }
    
    if (self::$engineCachePagePrefix)
    {
      $prefix = self::$engineCachePagePrefix;
    }
    else
    {
      $prefix = '';
      $dummyUrl = sfContext::getInstance()->getRouting()->generate('a_page', array('slug' => 'dummy'), false);
    
      if (preg_match("/^(\/\w+\.php)?(.*)\/dummy$/", $dummyUrl, $matches))
      {
        $prefix = $matches[2];
      }
      self::$engineCachePagePrefix = $prefix;
    }
    $url = preg_replace('/^' . preg_quote($prefix, '/') . '/', '', $url);
    
    $urls = array();
    // Remove any query string
    $twig = preg_replace('/\?.*$/', '', $url);
    while (true)
    {
      if (($twig === '/') || (!strlen($twig)))
      {
        // Either we've been called for the home page, or we just
        // stripped the first slash and are now considering the home page
        $urls[] = '/';
        break;
      }
      $urls[] = $twig;
      if (!preg_match('/^(.*)\/[^\/]+$/', $twig, $matches))
      {
        break;
      }
      $twig = $matches[1];
    }
    $page = Doctrine_Query::create()->
      select('p.*, length(p.slug) as len')->
      from('aPage p')->
      whereIn('p.slug', $urls)->
      andWhere('p.engine IS NOT NULL')->
      orderBy('len desc')->
      limit(1)->
      fetchOne();
    self::$engineCachePage = $page;
    self::$engineCacheUrl = $url;
    self::$engineCacheRemainder = false;
    if ($page)
    {
      $remainder = substr($url, strlen($page->slug));
      self::$engineCacheRemainder = $remainder;
      return $page;
    }
    return false;
  }
  
  // Used when generating an engine link from a page other than the engine page itself.
  // Many engines are only placed in one location per site, so this is often reasonable.
  // Cache this for acceptable performance. Admin pages match first to ensure that the
  // Apostrophe menu always goes to the right place. If you have a public version of the same
  // engine and you want to link to it via link_to(), target it explicitly, see
  // aRouteTools::pushTargetEnginePage()
  
  static public function getFirstEnginePage($engine)
  {
    if (isset(self::$engineCacheFirstEnginePages[$engine]))
    {
      return self::$engineCacheFirstEnginePages[$engine];
    }
    $page = Doctrine_Query::create()->
     from('aPage p')->
     where('p.engine = ?', array($engine))->
     limit(1)->
     fetchOne();
    self::$engineCacheFirstEnginePages[$engine] = $page;
    return $page;
  }
  
  // Useful with queries aimed at finding a page; avoids the 
  // considerable expense of hydrating it
  static public function fetchOneSlug($query)
  {
    $query->limit(1);
    $data = $query->fetchArray();
    if (!count($data))
    {
      return false;
    }
    return $data[0]['slug'];
  }
}
